#line 1821 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

#include "HLSLSupport.cginc"
#include "UnityShaderVariables.cginc"
#line 10

    
         // #pragma fragmentoption ARB_precision_hint_fastest
        // #pragma multi_compile_fwdbasealpha
        #include "HLSLSupport.cginc"
        #include "UnityShaderVariables.cginc"
        #define UNITY_PASS_FORWARDBASE
        #include "UnityCG.cginc"
        #include "Lighting.cginc"
        #include "AutoLight.cginc"

        #define INTERNAL_DATA
        #define WorldReflectionVector(data,normal) data.worldRefl
        #define WorldNormalVector(data,normal) normal

        sampler2D _MainTex;
        fixed4 _Color;
        float _Density;
        float _Occlusion;
        float _Brightness; 
        float _Length;
        float4 _Gravity;
        float4 _Wind;
        float _WindSpeed;

        struct Input 
        {
	        float2 uv_MainTex;
        };

        #ifdef LIGHTMAP_OFF

        struct v2f_surf 
        {
          float4 pos : SV_POSITION;
          float2 pack0 : TEXCOORD0;
          fixed3 normal : TEXCOORD1;
          fixed3 vlight : TEXCOORD2;
          LIGHTING_COORDS(3,4)
        };
        #endif
        #ifndef LIGHTMAP_OFF
        struct v2f_surf {
          float4 pos : SV_POSITION;
          float2 pack0 : TEXCOORD0;
          float2 lmap : TEXCOORD1;
          LIGHTING_COORDS(2,3)
        };
        #endif
        #ifndef LIGHTMAP_OFF
        // float4 unity_LightmapST;
        #endif
        float4 _MainTex_ST;


        #ifndef LIGHTMAP_OFF
        // sampler2D unity_Lightmap;
        #ifndef DIRLIGHTMAP_OFF
        // sampler2D unity_LightmapInd;
        #endif
        #endif

        v2f_surf VertexLight(appdata_full v, v2f_surf o)
        {
              o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);
              #ifndef LIGHTMAP_OFF
              o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
              #endif
              float3 worldN = mul((float3x3)_Object2World, SCALED_NORMAL);
              #ifdef LIGHTMAP_OFF
              o.normal = worldN;
              #endif
              #ifdef LIGHTMAP_OFF
              float3 shlight = ShadeSH9 (float4(worldN,1.0));
              o.vlight = shlight;
              #ifdef VERTEXLIGHT_ON
              float3 worldPos = mul(_Object2World, v.vertex).xyz;
              o.vlight += Shade4PointLights (
                unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
                unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
                unity_4LightAtten0, worldPos, worldN );
              #endif // VERTEXLIGHT_ON
              #endif // LIGHTMAP_OFF
              TRANSFER_VERTEX_TO_FRAGMENT(o);
              return o;
        }

        SurfaceOutput SetupSurf(inout Input surfIN, v2f_surf IN)
        {
              surfIN.uv_MainTex = IN.pack0.xy;
              #ifdef UNITY_COMPILER_HLSL
              SurfaceOutput o = (SurfaceOutput)0;
              #else
              SurfaceOutput o;
              #endif
              o.Albedo = 0.0;
              o.Emission = 0.0;
              o.Specular = 0.0;
              o.Alpha = 0.0;
              o.Gloss = 0.0;
              #ifdef LIGHTMAP_OFF
              o.Normal = IN.normal;
              #endif
              return o;
        }

        fixed4 SurfLight(v2f_surf IN, SurfaceOutput o)
        {
              fixed atten = LIGHT_ATTENUATION(IN);
              fixed4 c = 0;
              #ifdef LIGHTMAP_OFF
              c = LightingLambert (o, _WorldSpaceLightPos0.xyz, atten);
              #endif // LIGHTMAP_OFF
              #ifdef LIGHTMAP_OFF
              c.rgb += o.Albedo * IN.vlight;
              #endif // LIGHTMAP_OFF
              #ifndef LIGHTMAP_OFF
              #ifdef DIRLIGHTMAP_OFF
              fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);
              fixed3 lm = DecodeLightmap (lmtex);
              #else
              fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);
              fixed4 lmIndTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd,unity_Lightmap, IN.lmap.xy);
              half3 lm = LightingLambert_DirLightmap(o, lmtex, lmIndTex, 0).rgb;
              #endif
              #ifdef SHADOWS_SCREEN
              #if defined(SHADER_API_GLES) && defined(SHADER_API_MOBILE)
              c.rgb += o.Albedo * min(lm, atten*2);
              #else
              c.rgb += o.Albedo * max(min(lm,(atten*2)*lmtex.rgb), lm*atten);
              #endif
              #else // SHADOWS_SCREEN
              c.rgb += o.Albedo * lm;
              #endif // SHADOWS_SCREEN
              c.a = o.Alpha;
            #endif // LIGHTMAP_OFF
              c.a = o.Alpha;
              return c;
        }

    #line 1821 ""
#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
#endif

            // #pragma vertex vert_surf
            // #pragma fragment frag_surf

        void surf (Input IN, inout SurfaceOutput o) 
        {
	        fixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;
	        o.Albedo = c.rgb*(_Brightness);
	        o.Alpha = c.a*_Density*0.025;
            
            
        }

        v2f_surf vert_surf (appdata_full v) 
        {
              v2f_surf o;

              float3 p = (v.normal * _Length * 1.025);
              o.pos = mul(UNITY_MATRIX_MVP, v.vertex + float4(p,0) + 1.050625*(_Gravity+(sin(_Time.y*_WindSpeed)*_Wind)));
              
	          return VertexLight(v,o);
        }

        
        //Interprets "surf" shader
        fixed4 frag_surf (v2f_surf IN) : COLOR 
            {
              Input surfIN;
              SurfaceOutput o = SetupSurf(surfIN, IN);
              surf (surfIN, o);
              return SurfLight(IN, o);
            }
        